###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       22/Dec/2022  16:33:51
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu7\Desktop\project_test\user\main.c
#    Command line =  
#        -f C:\Users\pnu7\AppData\Local\Temp\EW4F0.tmp
#        (C:\Users\pnu7\Desktop\project_test\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu7\Desktop\project_test\Debug\List -o
#        C:\Users\pnu7\Desktop\project_test\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu7\Desktop\project_test\Libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu7\Desktop\project_test\Libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu7\Desktop\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu7\Desktop\project_test\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu7\Desktop\project_test\user\ -I
#        C:\Users\pnu7\Desktop\project_test\user\inc\ -I
#        C:\Users\pnu7\Desktop\project_test\Libraries\LCD\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu7\Desktop\project_test\Debug\List\main.lst
#    Object file  =  C:\Users\pnu7\Desktop\project_test\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu7\Desktop\project_test\user\main.c
      1          #include <stdio.h>
      2          #include "stm32f10x.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable13  ;; 0xe000e100
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0x0940             LSRS     R0,R0,#+5
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
      3          #include "core_cm3.h"
      4          #include "misc.h"
      5          #include "stm32f10x_gpio.h"
      6          #include "stm32f10x_rcc.h"
      7          #include "stm32f10x_usart.h"
      8          #include "stm32f10x_adc.h"
      9          #include "lcd.h"
     10          #include "touch.h"

   \                                 In section .data, align 4
     11          int color[12] = {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     12          

   \                                 In section .bss, align 2
     13          uint16_t div5 = 0;
   \                     div5:
   \   00000000                      DS8 2
     14          

   \                                 In section .bss, align 4
     15          uint32_t ADC_Values[4];
   \                     ADC_Values:
   \   00000000                      DS8 16
     16          

   \                                 In section .bss, align 4
     17          uint32_t tempValue = 0;
   \                     tempValue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          uint32_t darkValue = 0;
   \                     darkValue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          uint32_t dryValue = 0;
   \                     dryValue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     20          uint32_t waterEmpty = 0;
   \                     waterEmpty:
   \   00000000                      DS8 4
     21          

   \                                 In section .bss, align 2
     22          uint16_t motorFlag = 0;
   \                     motorFlag:
   \   00000000                      DS8 2
     23          
     24          //char wordFromUART2 = 'A';

   \                                 In section .bss, align 4
     25          u8* pmsg;
   \                     pmsg:
   \   00000000                      DS8 4
     26          
     27          void RCC_Configure(void);
     28          void GPIO_Configure(void);
     29          void USART2_Init(void);
     30          void NVIC_Configure(void);
     31          void TIM_Configure(void);
     32          void change(uint16_t pulse);
     33          void TIM2_IRQHandler(void);
     34          

   \                                 In section .bss, align 4
     35          TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
   \                     TIM_TimeBaseStructure:
   \   00000000                      DS8 12
     36          
     37          void sendDataUART2(uint16_t data);
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void RCC_Configure(void)
     40          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     41                RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     42                RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     43                RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2020             MOVS     R0,#+32
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     44                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     45                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     46          
     47                RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF44F 0x7000      MOV      R0,#+512
   \   00000030   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     48                RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     49                RCC_APB1PeriphClockCmd(RCC_APB1ENR_USART2EN, ENABLE);
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000042   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     50          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void GPIO_Configure(void)
     53          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     54                GPIO_InitTypeDef GPIO_InitStructure;
     55          
     56                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
   \   00000002   0x200C             MOVS     R0,#+12
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     57                GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     58                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
     59                GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable13_1  ;; 0x40011400
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     60          
     61                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
   \   0000001E   0xF44F 0x7000      MOV      R0,#+512
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     62                GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0xF88D 0x0002      STRB     R0,[SP, #+2]
     63                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     64                GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_2  ;; 0x40011000
   \   00000038   0x.... 0x....      BL       GPIO_Init
     65          
     66                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     67                GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0xF88D 0x0002      STRB     R0,[SP, #+2]
     68                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000048   0x2010             MOVS     R0,#+16
   \   0000004A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     69                GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   0000004E   0x4669             MOV      R1,SP
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable13_3  ;; 0x40010c00
   \   00000054   0x.... 0x....      BL       GPIO_Init
     70          
     71                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
   \   00000058   0x2072             MOVS     R0,#+114
   \   0000005A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     72                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF88D 0x0003      STRB     R0,[SP, #+3]
     73          
     74                GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x40010800
   \   0000006A   0x.... 0x....      BL       GPIO_Init
     75          
     76                //USART2 bluetooth
     77                //TX
     78                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   0000006E   0x2004             MOVS     R0,#+4
   \   00000070   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     79                GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000074   0x2003             MOVS     R0,#+3
   \   00000076   0xF88D 0x0002      STRB     R0,[SP, #+2]
     80                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000007A   0x2018             MOVS     R0,#+24
   \   0000007C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     81                GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000080   0x4669             MOV      R1,SP
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x40010800
   \   00000086   0x.... 0x....      BL       GPIO_Init
     82                //RX
     83                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   0000008A   0x2008             MOVS     R0,#+8
   \   0000008C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     84                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \   00000090   0x2048             MOVS     R0,#+72
   \   00000092   0xF88D 0x0003      STRB     R0,[SP, #+3]
     85                GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable13_4  ;; 0x40010800
   \   0000009C   0x.... 0x....      BL       GPIO_Init
     86          }
   \   000000A0   0xBD01             POP      {R0,PC}          ;; return
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void USART2_Init(void)
     89          {
   \                     USART2_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     90                USART_InitTypeDef USART2_InitStructure;
     91          
     92                // Enable the USART1 peripheral
     93          
     94                USART_Cmd(USART2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13_5  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_Cmd
     95          
     96                // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     97                USART2_InitStructure.USART_BaudRate = 9600;
   \   0000000C   0xF44F 0x5016      MOV      R0,#+9600
   \   00000010   0x9000             STR      R0,[SP, #+0]
     98                USART2_InitStructure.USART_WordLength = (uint16_t) USART_WordLength_8b;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     99                USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000018   0x200C             MOVS     R0,#+12
   \   0000001A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    100                USART2_InitStructure.USART_Parity = (uint16_t) USART_Parity_No;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    101                USART2_InitStructure.USART_StopBits = (uint16_t) USART_StopBits_1;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    102                USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    103          
    104          
    105                USART_Init(USART1, &USART2_InitStructure);
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable13_6  ;; 0x40013800
   \   00000036   0x.... 0x....      BL       USART_Init
    106                USART_Init(USART2, &USART2_InitStructure);
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable13_5  ;; 0x40004400
   \   00000040   0x.... 0x....      BL       USART_Init
    107                // TODO: Enable the USART1 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
    108          
    109                USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   \   00000044   0x2201             MOVS     R2,#+1
   \   00000046   0xF240 0x5125      MOVW     R1,#+1317
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable13_5  ;; 0x40004400
   \   0000004E   0x.... 0x....      BL       USART_ITConfig
    110          }
   \   00000052   0xB005             ADD      SP,SP,#+20
   \   00000054   0xBD00             POP      {PC}             ;; return
    111          
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    114          
    115                NVIC_InitTypeDef NVIC_InitStructure;
    116          
    117          
    118                NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
   \   00000002   0xF44F 0x60C0      MOV      R0,#+1536
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    119          
    120                NVIC_EnableIRQ(TIM2_IRQn);
   \   0000000A   0x201C             MOVS     R0,#+28
   \   0000000C   0x.... 0x....      BL       __NVIC_EnableIRQ
    121                NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   00000010   0x201C             MOVS     R0,#+28
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    122                NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0; // TODO
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    123                NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0; // TODO
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    124                NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0003      STRB     R0,[SP, #+3]
    125                NVIC_Init(&NVIC_InitStructure);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       NVIC_Init
    126          
    127          
    128                NVIC_EnableIRQ(ADC1_2_IRQn);
   \   0000002E   0x2012             MOVS     R0,#+18
   \   00000030   0x.... 0x....      BL       __NVIC_EnableIRQ
    129                NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \   00000034   0x2012             MOVS     R0,#+18
   \   00000036   0xF88D 0x0000      STRB     R0,[SP, #+0]
    130                NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1; // TODO
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    131                NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0; // TODO
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0002      STRB     R0,[SP, #+2]
    132                NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0003      STRB     R0,[SP, #+3]
    133                NVIC_Init(&NVIC_InitStructure);
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       NVIC_Init
    134          
    135                //USART2
    136                NVIC_EnableIRQ(USART2_IRQn);
   \   00000052   0x2026             MOVS     R0,#+38
   \   00000054   0x.... 0x....      BL       __NVIC_EnableIRQ
    137                NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   00000058   0x2026             MOVS     R0,#+38
   \   0000005A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    138                NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x2; // TODO
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0xF88D 0x0001      STRB     R0,[SP, #+1]
    139                NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0; // TODO
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF88D 0x0002      STRB     R0,[SP, #+2]
    140                NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    141                NVIC_Init(&NVIC_InitStructure);
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x.... 0x....      BL       NVIC_Init
    142          
    143          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    144          
    145          
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void TIM_Configure(){
   \                     TIM_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    148                TIM_TimeBaseStructure.TIM_Period = 10000-1;
   \   00000002   0xF242 0x700F      MOVW     R0,#+9999
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   0000000A   0x8088             STRH     R0,[R1, #+4]
    149                TIM_TimeBaseStructure.TIM_Prescaler = 7200-1;
   \   0000000C   0xF641 0x401F      MOVW     R0,#+7199
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   00000014   0x8008             STRH     R0,[R1, #+0]
    150                TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   0000001C   0x80C8             STRH     R0,[R1, #+6]
    151                TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   00000024   0x8048             STRH     R0,[R1, #+2]
    152                TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   0000002C   0x7208             STRB     R0,[R1, #+8]
    153                TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable13_7
   \   00000032   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000036   0x.... 0x....      BL       TIM_TimeBaseInit
    154                TIM_ARRPreloadConfig(TIM2, ENABLE);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000040   0x.... 0x....      BL       TIM_ARRPreloadConfig
    155          
    156                TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
   \   00000044   0x2201             MOVS     R2,#+1
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000004C   0x.... 0x....      BL       TIM_ITConfig
    157                TIM_Cmd(TIM2, ENABLE);
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000056   0x.... 0x....      BL       TIM_Cmd
    158          
    159          }
   \   0000005A   0xBD01             POP      {R0,PC}          ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void DMA_Configure(void){
   \                     DMA_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    162            
    163                DMA_InitTypeDef DMA_Instructure;
    164                DMA_DeInit(DMA1_Channel1);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable13_8  ;; 0x40020008
   \   00000008   0x.... 0x....      BL       DMA_DeInit
    165                DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable13_9  ;; 0x4001244c
   \   00000010   0x9000             STR      R0,[SP, #+0]
    166                DMA_Instructure.DMA_MemoryBaseAddr=(uint32_t)ADC_Values;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable13_10
   \   00000016   0x9001             STR      R0,[SP, #+4]
    167          
    168                DMA_Instructure.DMA_Mode=DMA_Mode_Circular;
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x9008             STR      R0,[SP, #+32]
    169                DMA_Instructure.DMA_Priority= DMA_Priority_High;
   \   0000001C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000020   0x9009             STR      R0,[SP, #+36]
    170                DMA_Instructure.DMA_M2M= DMA_M2M_Disable;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x900A             STR      R0,[SP, #+40]
    171                DMA_Instructure.DMA_BufferSize= 4;
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x9003             STR      R0,[SP, #+12]
    172                DMA_Instructure.DMA_DIR= DMA_DIR_PeripheralSRC;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9002             STR      R0,[SP, #+8]
    173                DMA_Instructure.DMA_MemoryInc=DMA_MemoryInc_Enable;
   \   0000002E   0x2080             MOVS     R0,#+128
   \   00000030   0x9005             STR      R0,[SP, #+20]
    174                DMA_Instructure.DMA_MemoryDataSize=DMA_MemoryDataSize_Word;
   \   00000032   0xF44F 0x6000      MOV      R0,#+2048
   \   00000036   0x9007             STR      R0,[SP, #+28]
    175                DMA_Instructure.DMA_PeripheralDataSize=DMA_PeripheralDataSize_Word;
   \   00000038   0xF44F 0x7000      MOV      R0,#+512
   \   0000003C   0x9006             STR      R0,[SP, #+24]
    176                DMA_Instructure.DMA_PeripheralInc=DMA_PeripheralInc_Disable;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9004             STR      R0,[SP, #+16]
    177                DMA_Init(DMA1_Channel1, &DMA_Instructure);
   \   00000042   0x4669             MOV      R1,SP
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable13_8  ;; 0x40020008
   \   00000048   0x.... 0x....      BL       DMA_Init
    178                DMA_Cmd(DMA1_Channel1, ENABLE);
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable13_8  ;; 0x40020008
   \   00000052   0x.... 0x....      BL       DMA_Cmd
    179          
    180          }
   \   00000056   0xB00B             ADD      SP,SP,#+44
   \   00000058   0xBD00             POP      {PC}             ;; return
    181          

   \                                 In section .text, align 2, keep-with-next
    182          void ADC_Configure(){
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    183                ADC_InitTypeDef ADC_InitStructure;
    184          
    185                ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
    186                ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    187                ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0005      STRB     R0,[SP, #+5]
    188                ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   00000014   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000018   0x9002             STR      R0,[SP, #+8]
    189                ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
    190                ADC_InitStructure.ADC_NbrOfChannel = 4;
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0xF88D 0x0010      STRB     R0,[SP, #+16]
    191          
    192                ADC_Init(ADC1, &ADC_InitStructure);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   0000002A   0x.... 0x....      BL       ADC_Init
    193          
    194                ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_55Cycles5); //@@
   \   0000002E   0x2305             MOVS     R3,#+5
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000038   0x.... 0x....      BL       ADC_RegularChannelConfig
    195                ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 2, ADC_SampleTime_55Cycles5); //@@
   \   0000003C   0x2305             MOVS     R3,#+5
   \   0000003E   0x2202             MOVS     R2,#+2
   \   00000040   0x2104             MOVS     R1,#+4
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000046   0x.... 0x....      BL       ADC_RegularChannelConfig
    196          
    197                ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 3, ADC_SampleTime_55Cycles5); //@@
   \   0000004A   0x2305             MOVS     R3,#+5
   \   0000004C   0x2203             MOVS     R2,#+3
   \   0000004E   0x2105             MOVS     R1,#+5
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000054   0x.... 0x....      BL       ADC_RegularChannelConfig
    198                ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 4, ADC_SampleTime_55Cycles5); //@@
   \   00000058   0x2305             MOVS     R3,#+5
   \   0000005A   0x2204             MOVS     R2,#+4
   \   0000005C   0x2106             MOVS     R1,#+6
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000062   0x.... 0x....      BL       ADC_RegularChannelConfig
    199          
    200                //ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
    201                ADC_DMACmd(ADC1, ENABLE);
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   0000006C   0x.... 0x....      BL       ADC_DMACmd
    202                ADC_Cmd(ADC1, ENABLE);
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000076   0x.... 0x....      BL       ADC_Cmd
    203          
    204                while(ADC_GetCalibrationStatus(ADC1)){ }
   \                     ??ADC_Configure_0: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   0000007E   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD1F9             BNE.N    ??ADC_Configure_0
    205                ADC_ResetCalibration(ADC1);
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   0000008A   0x.... 0x....      BL       ADC_ResetCalibration
    206          
    207                while(ADC_GetResetCalibrationStatus(ADC1)){ }
   \                     ??ADC_Configure_1: (+1)
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   00000092   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD1F9             BNE.N    ??ADC_Configure_1
    208                ADC_StartCalibration(ADC1);
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   0000009E   0x.... 0x....      BL       ADC_StartCalibration
    209          
    210                ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   000000A2   0x2101             MOVS     R1,#+1
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable13_11  ;; 0x40012400
   \   000000A8   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    211          }
   \   000000AC   0xB005             ADD      SP,SP,#+20
   \   000000AE   0xBD00             POP      {PC}             ;; return
    212          
    213          

   \                                 In section .text, align 2, keep-with-next
    214          void USART2_IRQHandler() {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    215                if(USART_GetITStatus(USART2,USART_IT_RXNE)!=RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable13_5  ;; 0x40004400
   \   0000000A   0x.... 0x....      BL       USART_GetITStatus
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD002             BEQ.N    ??USART2_IRQHandler_0
    216                // the most recent received data by the USART1 peripheral
    217                char temp = USART_ReceiveData(USART2);
   \   00000012   0x....             LDR.N    R0,??DataTable13_5  ;; 0x40004400
   \   00000014   0x.... 0x....      BL       USART_ReceiveData
    218                // clear 'Read data register not empty' flag
    219            }
    220          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    221          

   \                                 In section .text, align 2, keep-with-next
    222          void sendDataUART2(uint16_t data) {
   \                     sendDataUART2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    223          /* Wait till TC is set */
    224          	USART_SendData(USART2, data);
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x....             LDR.N    R0,??DataTable13_5  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_SendData
    225              while ((USART2->SR & USART_SR_TC) == 0);
   \                     ??sendDataUART2_0: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable13_5  ;; 0x40004400
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x0640             LSLS     R0,R0,#+25
   \   00000012   0xD5FB             BPL.N    ??sendDataUART2_0
    226          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void sendMessage_water(int8_t data){
   \                     sendMessage_water: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    229            char msg[50];
    230            char * boundaryMsg = (data == 1 ? "min" : "max");
   \   00000004   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD101             BNE.N    ??sendMessage_water_0
   \   0000000A   0x....             ADR.N    R3,??DataTable12  ;; "min"
   \   0000000C   0xE000             B.N      ??sendMessage_water_1
   \                     ??sendMessage_water_0: (+1)
   \   0000000E   0x....             ADR.N    R3,??DataTable12_1  ;; "max"
    231            snprintf(msg,50,"LED%s", boundaryMsg);
   \                     ??sendMessage_water_1: (+1)
   \   00000010   0x....             LDR.N    R2,??DataTable13_12
   \   00000012   0x2132             MOVS     R1,#+50
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       snprintf
    232            pmsg = "NOT ENOUGH WATER.\r\n";
   \   0000001A   0x....             LDR.N    R0,??DataTable13_13
   \   0000001C   0x....             LDR.N    R1,??DataTable13_14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xE00A             B.N      ??sendMessage_water_2
    233            while(*pmsg!=0){
    234                sendDataUART2(*pmsg);
   \                     ??sendMessage_water_3: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable13_14
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       sendDataUART2
    235                pmsg++;
   \   0000002E   0x....             LDR.N    R0,??DataTable13_14
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable13_14
   \   00000036   0x6008             STR      R0,[R1, #+0]
    236            }
   \                     ??sendMessage_water_2: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable13_14
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1EF             BNE.N    ??sendMessage_water_3
    237          }
   \   00000042   0xB00D             ADD      SP,SP,#+52
   \   00000044   0xBD00             POP      {PC}             ;; return
    238          

   \                                 In section .text, align 2, keep-with-next
    239          void sendMessage_tempcold(int8_t data){
   \                     sendMessage_tempcold: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    240            char msg[50];
    241            char * boundaryMsg = (data == 1 ? "min" : "max");
   \   00000004   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD101             BNE.N    ??sendMessage_tempcold_0
   \   0000000A   0x....             ADR.N    R3,??DataTable12  ;; "min"
   \   0000000C   0xE000             B.N      ??sendMessage_tempcold_1
   \                     ??sendMessage_tempcold_0: (+1)
   \   0000000E   0x....             ADR.N    R3,??DataTable12_1  ;; "max"
    242            snprintf(msg,50,"LED%s", boundaryMsg);
   \                     ??sendMessage_tempcold_1: (+1)
   \   00000010   0x....             LDR.N    R2,??DataTable13_12
   \   00000012   0x2132             MOVS     R1,#+50
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       snprintf
    243            pmsg = "TOO COLD.\r\n";
   \   0000001A   0x....             LDR.N    R0,??DataTable13_15
   \   0000001C   0x....             LDR.N    R1,??DataTable13_14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xE00A             B.N      ??sendMessage_tempcold_2
    244            while(*pmsg!=0){
    245                sendDataUART2(*pmsg);
   \                     ??sendMessage_tempcold_3: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable13_14
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       sendDataUART2
    246                pmsg++;
   \   0000002E   0x....             LDR.N    R0,??DataTable13_14
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable13_14
   \   00000036   0x6008             STR      R0,[R1, #+0]
    247            }
   \                     ??sendMessage_tempcold_2: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable13_14
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1EF             BNE.N    ??sendMessage_tempcold_3
    248          }
   \   00000042   0xB00D             ADD      SP,SP,#+52
   \   00000044   0xBD00             POP      {PC}             ;; return
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void sendMessage_temphot(int8_t data){
   \                     sendMessage_temphot: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    251            char msg[50];
    252            char * boundaryMsg = (data == 1 ? "min" : "max");
   \   00000004   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD101             BNE.N    ??sendMessage_temphot_0
   \   0000000A   0x....             ADR.N    R3,??DataTable12  ;; "min"
   \   0000000C   0xE000             B.N      ??sendMessage_temphot_1
   \                     ??sendMessage_temphot_0: (+1)
   \   0000000E   0x....             ADR.N    R3,??DataTable12_1  ;; "max"
    253            snprintf(msg,50,"LED%s", boundaryMsg);
   \                     ??sendMessage_temphot_1: (+1)
   \   00000010   0x....             LDR.N    R2,??DataTable13_12
   \   00000012   0x2132             MOVS     R1,#+50
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       snprintf
    254            pmsg = "TOO HOT.\r\n";
   \   0000001A   0x....             LDR.N    R0,??DataTable13_16
   \   0000001C   0x....             LDR.N    R1,??DataTable13_14
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xE00A             B.N      ??sendMessage_temphot_2
    255            while(*pmsg!=0){
    256                sendDataUART2(*pmsg);
   \                     ??sendMessage_temphot_3: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable13_14
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       sendDataUART2
    257                pmsg++;
   \   0000002E   0x....             LDR.N    R0,??DataTable13_14
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable13_14
   \   00000036   0x6008             STR      R0,[R1, #+0]
    258            }
   \                     ??sendMessage_temphot_2: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable13_14
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1EF             BNE.N    ??sendMessage_temphot_3
    259          }
   \   00000042   0xB00D             ADD      SP,SP,#+52
   \   00000044   0xBD00             POP      {PC}             ;; return
    260          
    261          

   \                                 In section .text, align 2, keep-with-next
    262          void TIM2_IRQHandler(void) {
   \                     TIM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    263            if((TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)){ 
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000008   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD029             BEQ.N    ??TIM2_IRQHandler_0
    264             if(motorFlag){
   \   00000010   0x....             LDR.N    R0,??DataTable13_17
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD01C             BEQ.N    ??TIM2_IRQHandler_1
    265                GPIO_SetBits(GPIOD, GPIO_Pin_3);
   \   00000018   0x2108             MOVS     R1,#+8
   \   0000001A   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40011400
   \   0000001C   0x.... 0x....      BL       GPIO_SetBits
    266                div5++;
   \   00000020   0x....             LDR.N    R0,??DataTable13_18
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable13_18
   \   00000028   0x8008             STRH     R0,[R1, #+0]
    267          
    268                if(div5 % 5 == 0){
   \   0000002A   0x....             LDR.N    R0,??DataTable13_18
   \   0000002C   0x8800             LDRH     R0,[R0, #+0]
   \   0000002E   0x2105             MOVS     R1,#+5
   \   00000030   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000034   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD10E             BNE.N    ??TIM2_IRQHandler_2
    269                GPIO_ResetBits(GPIOD, GPIO_Pin_3);
   \   0000003C   0x2108             MOVS     R1,#+8
   \   0000003E   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40011400
   \   00000040   0x.... 0x....      BL       GPIO_ResetBits
    270                div5=0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable13_18
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    271                motorFlag = 0;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable13_17
   \   0000004E   0x8008             STRH     R0,[R1, #+0]
   \   00000050   0xE003             B.N      ??TIM2_IRQHandler_2
    272                }
    273              }
    274            else{
    275              GPIO_SetBits(GPIOD, GPIO_Pin_3);
   \                     ??TIM2_IRQHandler_1: (+1)
   \   00000052   0x2108             MOVS     R1,#+8
   \   00000054   0x....             LDR.N    R0,??DataTable13_1  ;; 0x40011400
   \   00000056   0x.... 0x....      BL       GPIO_SetBits
    276            }
    277              TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \                     ??TIM2_IRQHandler_2: (+1)
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000060   0x.... 0x....      BL       TIM_ClearITPendingBit
    278            }
    279          }
   \                     ??TIM2_IRQHandler_0: (+1)
   \   00000064   0xBD01             POP      {R0,PC}          ;; return
    280          
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void Delay(void) {
    283              int i;
    284          
    285              for (i = 0; i < 2000000; i++) {}
   \                     Delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE000             B.N      ??Delay_0
   \                     ??Delay_1: (+1)
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Delay_0: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable13_19  ;; 0x1e8480
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xDBFB             BLT.N    ??Delay_1
    286          }
   \   0000000C   0x4770             BX       LR               ;; return
    287          

   \                                 In section .text, align 2, keep-with-next
    288          int main() {
   \                     main: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    289          
    290            SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    291            RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
    292            GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    293            ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
    294            DMA_Configure();
   \   00000012   0x.... 0x....      BL       DMA_Configure
    295            NVIC_Configure();
   \   00000016   0x.... 0x....      BL       NVIC_Configure
    296            TIM_Configure();
   \   0000001A   0x.... 0x....      BL       TIM_Configure
    297            USART2_Init();
   \   0000001E   0x.... 0x....      BL       USART2_Init
    298            // ------------------------------------
    299            //USART1_Init();
    300            LCD_Init();
   \   00000022   0x.... 0x....      BL       LCD_Init
    301          
    302            LCD_Clear(WHITE);
   \   00000026   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000002A   0x.... 0x....      BL       LCD_Clear
    303            
    304            uint8_t message = 5;
   \   0000002E   0x2405             MOVS     R4,#+5
   \   00000030   0xE01E             B.N      ??main_0
    305          
    306            while(1){
    307              // TODO : LCD @ @@ @ @@ @@ @@
    308              LCD_ShowString(40, 40, "Team07", BLACK, WHITE);
    309          
    310              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
    311              
    312              waterEmpty = ADC_Values[0];
    313              tempValue = ADC_Values[1];
    314              darkValue = ADC_Values[2];
    315              dryValue = ADC_Values[3];
    316              
    317              
    318              LCD_ShowString(20, 60, "empty:", BLACK, WHITE);
    319              LCD_ShowString(20, 100, "temp: ", BLACK, WHITE);
    320              LCD_ShowString(20, 140, "dark: ", BLACK, WHITE);
    321              LCD_ShowString(20, 180, "dry: ", BLACK, WHITE);
    322              
    323              
    324              LCD_ShowNum(70, 60, waterEmpty/30, 4, BLACK, WHITE);
    325              LCD_ShowNum(70, 100, tempValue/100, 4, BLACK, WHITE);
    326              LCD_ShowNum(70, 140, darkValue/50, 4, BLACK, WHITE);
    327              LCD_ShowNum(70, 180, dryValue/50, 4, BLACK, WHITE);
    328              
    329              
    330              
    331              if(dryValue > 2400)  //@@ @ @ (@@@@@ @@ @)
    332              {
    333                if(darkValue > 700)  //@@. @@@@ @@ @@@
    334                {
    335                  if(waterEmpty > 3000)  //@@ @@@@ @@ @
    336                    motorFlag = 1;
    337                  else
    338                    sendMessage_water(message);
    339                }
    340              }
    341              
    342              if(tempValue < 2300){
    343                sendMessage_tempcold(message);
    344                Delay();
    345              }
    346              else if(tempValue > 3000){
   \                     ??main_1: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable13_20
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF640 0x31B9      MOVW     R1,#+3001
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD316             BCC.N    ??main_2
    347                sendMessage_temphot(message);
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000042   0x.... 0x....      BL       sendMessage_temphot
    348                Delay();
   \   00000046   0x.... 0x....      BL       Delay
   \   0000004A   0xE00F             B.N      ??main_2
    349              }
   \                     ??main_3: (+1)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       sendMessage_water
   \                     ??main_4: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable13_20
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF640 0x01FC      MOVW     R1,#+2300
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD2E8             BCS.N    ??main_1
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       sendMessage_tempcold
   \   00000068   0x.... 0x....      BL       Delay
    350              
    351              Delay();
   \                     ??main_2: (+1)
   \   0000006C   0x.... 0x....      BL       Delay
   \                     ??main_0: (+1)
   \   00000070   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000074   0x9000             STR      R0,[SP, #+0]
   \   00000076   0x2300             MOVS     R3,#+0
   \   00000078   0x....             LDR.N    R2,??DataTable13_21
   \   0000007A   0x2128             MOVS     R1,#+40
   \   0000007C   0x2028             MOVS     R0,#+40
   \   0000007E   0x.... 0x....      BL       LCD_ShowString
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x....             LDR.N    R0,??DataTable13_11  ;; 0x40012400
   \   00000086   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
   \   0000008A   0x....             LDR.N    R0,??DataTable13_10
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x....             LDR.N    R1,??DataTable13_22
   \   00000090   0x6008             STR      R0,[R1, #+0]
   \   00000092   0x....             LDR.N    R0,??DataTable13_10
   \   00000094   0x6840             LDR      R0,[R0, #+4]
   \   00000096   0x....             LDR.N    R1,??DataTable13_20
   \   00000098   0x6008             STR      R0,[R1, #+0]
   \   0000009A   0x....             LDR.N    R0,??DataTable13_10
   \   0000009C   0x6880             LDR      R0,[R0, #+8]
   \   0000009E   0x....             LDR.N    R1,??DataTable13_23
   \   000000A0   0x6008             STR      R0,[R1, #+0]
   \   000000A2   0x....             LDR.N    R0,??DataTable13_10
   \   000000A4   0x68C0             LDR      R0,[R0, #+12]
   \   000000A6   0x....             LDR.N    R1,??DataTable13_24
   \   000000A8   0x6008             STR      R0,[R1, #+0]
   \   000000AA   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000AE   0x9000             STR      R0,[SP, #+0]
   \   000000B0   0x2300             MOVS     R3,#+0
   \   000000B2   0x....             LDR.N    R2,??DataTable13_25
   \   000000B4   0x213C             MOVS     R1,#+60
   \   000000B6   0x2014             MOVS     R0,#+20
   \   000000B8   0x.... 0x....      BL       LCD_ShowString
   \   000000BC   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000C0   0x9000             STR      R0,[SP, #+0]
   \   000000C2   0x2300             MOVS     R3,#+0
   \   000000C4   0x....             LDR.N    R2,??DataTable13_26
   \   000000C6   0x2164             MOVS     R1,#+100
   \   000000C8   0x2014             MOVS     R0,#+20
   \   000000CA   0x.... 0x....      BL       LCD_ShowString
   \   000000CE   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000D2   0x9000             STR      R0,[SP, #+0]
   \   000000D4   0x2300             MOVS     R3,#+0
   \   000000D6   0x....             LDR.N    R2,??DataTable13_27
   \   000000D8   0x218C             MOVS     R1,#+140
   \   000000DA   0x2014             MOVS     R0,#+20
   \   000000DC   0x.... 0x....      BL       LCD_ShowString
   \   000000E0   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x2300             MOVS     R3,#+0
   \   000000E8   0x....             LDR.N    R2,??DataTable13_28
   \   000000EA   0x21B4             MOVS     R1,#+180
   \   000000EC   0x2014             MOVS     R0,#+20
   \   000000EE   0x.... 0x....      BL       LCD_ShowString
   \   000000F2   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000F6   0x9001             STR      R0,[SP, #+4]
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0x2304             MOVS     R3,#+4
   \   000000FE   0x....             LDR.N    R0,??DataTable13_22
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x211E             MOVS     R1,#+30
   \   00000104   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000108   0x213C             MOVS     R1,#+60
   \   0000010A   0x2046             MOVS     R0,#+70
   \   0000010C   0x.... 0x....      BL       LCD_ShowNum
   \   00000110   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000114   0x9001             STR      R0,[SP, #+4]
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x9000             STR      R0,[SP, #+0]
   \   0000011A   0x2304             MOVS     R3,#+4
   \   0000011C   0x....             LDR.N    R0,??DataTable13_20
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x2164             MOVS     R1,#+100
   \   00000122   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000126   0x2164             MOVS     R1,#+100
   \   00000128   0x2046             MOVS     R0,#+70
   \   0000012A   0x.... 0x....      BL       LCD_ShowNum
   \   0000012E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000132   0x9001             STR      R0,[SP, #+4]
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x9000             STR      R0,[SP, #+0]
   \   00000138   0x2304             MOVS     R3,#+4
   \   0000013A   0x....             LDR.N    R0,??DataTable13_23
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0x2132             MOVS     R1,#+50
   \   00000140   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000144   0x218C             MOVS     R1,#+140
   \   00000146   0x2046             MOVS     R0,#+70
   \   00000148   0x.... 0x....      BL       LCD_ShowNum
   \   0000014C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000150   0x9001             STR      R0,[SP, #+4]
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x9000             STR      R0,[SP, #+0]
   \   00000156   0x2304             MOVS     R3,#+4
   \   00000158   0x....             LDR.N    R0,??DataTable13_24
   \   0000015A   0x6800             LDR      R0,[R0, #+0]
   \   0000015C   0x2132             MOVS     R1,#+50
   \   0000015E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000162   0x21B4             MOVS     R1,#+180
   \   00000164   0x2046             MOVS     R0,#+70
   \   00000166   0x.... 0x....      BL       LCD_ShowNum
   \   0000016A   0x....             LDR.N    R0,??DataTable13_24
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0xF640 0x1161      MOVW     R1,#+2401
   \   00000172   0x4288             CMP      R0,R1
   \   00000174   0xF4FF 0xAF6E      BCC.W    ??main_4
   \   00000178   0x....             LDR.N    R0,??DataTable13_23
   \   0000017A   0x6800             LDR      R0,[R0, #+0]
   \   0000017C   0xF240 0x21BD      MOVW     R1,#+701
   \   00000180   0x4288             CMP      R0,R1
   \   00000182   0xF4FF 0xAF67      BCC.W    ??main_4
   \   00000186   0x....             LDR.N    R0,??DataTable13_22
   \   00000188   0x6800             LDR      R0,[R0, #+0]
   \   0000018A   0xF640 0x31B9      MOVW     R1,#+3001
   \   0000018E   0x4288             CMP      R0,R1
   \   00000190   0xF4FF 0xAF5C      BCC.W    ??main_3
   \   00000194   0x2001             MOVS     R0,#+1
   \   00000196   0x....             LDR.N    R1,??DataTable13_17
   \   00000198   0x8008             STRH     R0,[R1, #+0]
   \   0000019A   0xE75B             B.N      ??main_4
    352            }
    353          
    354          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x6D 0x69          DC8      "min"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x6D 0x61          DC8      "max"
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \   00000000   0x........         DC32     TIM_TimeBaseStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \   00000000   0x4001244C         DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \   00000000   0x........         DC32     ADC_Values

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \   00000000   0x........         DC32     pmsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \   00000000   0x........         DC32     motorFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \   00000000   0x........         DC32     div5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \   00000000   0x........         DC32     tempValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \   00000000   0x........         DC32     waterEmpty

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \   00000000   0x........         DC32     darkValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \   00000000   0x........         DC32     dryValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_26:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_27:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_28:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x69          DC8 "min"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x6D 0x61          DC8 "max"
   \              0x78 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4C 0x45          DC8 "LED%s"
   \              0x44 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4E 0x4F          DC8 "NOT ENOUGH WATER.\015\012"
   \              0x54 0x20    
   \              0x45 0x4E    
   \              0x4F 0x55    
   \              0x47 0x48    
   \              0x20 0x57    
   \              0x41 0x54    
   \              0x45 0x52    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x54 0x4F          DC8 "TOO COLD.\015\012"
   \              0x4F 0x20    
   \              0x43 0x4F    
   \              0x4C 0x44    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x54 0x4F          DC8 "TOO HOT.\015\012"
   \              0x4F 0x20    
   \              0x48 0x4F    
   \              0x54 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x54 0x65          DC8 "Team07"
   \              0x61 0x6D    
   \              0x30 0x37    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x65 0x6D          DC8 "empty:"
   \              0x70 0x74    
   \              0x79 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x74 0x65          DC8 "temp: "
   \              0x6D 0x70    
   \              0x3A 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x64 0x61          DC8 "dark: "
   \              0x72 0x6B    
   \              0x3A 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x64 0x72          DC8 "dry: "
   \              0x79 0x3A    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_DMACmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
      48   DMA_Configure
        48   -> DMA_Cmd
        48   -> DMA_DeInit
        48   -> DMA_Init
       0   Delay
       8   GPIO_Configure
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   TIM2_IRQHandler
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
       8   TIM_Configure
         8   -> TIM_ARRPreloadConfig
         8   -> TIM_Cmd
         8   -> TIM_ITConfig
         8   -> TIM_TimeBaseInit
       8   USART2_IRQHandler
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
      24   USART2_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   __NVIC_EnableIRQ
      16   main
        16   -> ADC_Configure
        16   -> ADC_SoftwareStartConvCmd
        16   -> DMA_Configure
        16   -> Delay
        16   -> GPIO_Configure
        16   -> LCD_Clear
        16   -> LCD_Init
        16   -> LCD_ShowNum
        16   -> LCD_ShowString
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> SystemInit
        16   -> TIM_Configure
        16   -> USART2_Init
        16   -> sendMessage_tempcold
        16   -> sendMessage_temphot
        16   -> sendMessage_water
       8   sendDataUART2
         8   -> USART_SendData
      56   sendMessage_tempcold
        56   -> sendDataUART2
        56   -> snprintf
      56   sendMessage_temphot
        56   -> sendDataUART2
        56   -> snprintf
      56   sendMessage_water
        56   -> sendDataUART2
        56   -> snprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_26
       4  ??DataTable13_27
       4  ??DataTable13_28
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ?_0
       4  ?_1
       8  ?_10
       8  ?_2
      20  ?_3
      12  ?_4
      12  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
     176  ADC_Configure
      16  ADC_Values
      90  DMA_Configure
      14  Delay
     162  GPIO_Configure
     120  NVIC_Configure
      72  RCC_Configure
     102  TIM2_IRQHandler
      92  TIM_Configure
      12  TIM_TimeBaseStructure
      26  USART2_IRQHandler
      86  USART2_Init
      30  __NVIC_EnableIRQ
      48  color
       4  darkValue
       2  div5
       4  dryValue
     412  main
       2  motorFlag
       4  pmsg
      22  sendDataUART2
      70  sendMessage_tempcold
      70  sendMessage_temphot
      70  sendMessage_water
       4  tempValue
       4  waterEmpty

 
    52 bytes in section .bss
    48 bytes in section .data
   100 bytes in section .rodata
 1 738 bytes in section .text
 
 1 738 bytes of CODE  memory
   100 bytes of CONST memory
   100 bytes of DATA  memory

Errors: none
Warnings: none
